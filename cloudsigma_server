#!/usr/bin/env python

DOCUMENTATION = '''
---
module: cloudsigma_server
short_description: create, delete, start or stop a server in cloudsigma cloud
description:
  - . This module has a dependency on cloudsigma >= 0.3
options:
 
requirements: [ "cloudsigma" ]
author: Julien DAUPHANT
'''

EXAMPLES = '''

'''
try:
	import sys
	import os
	import cloudsigma
	import ConfigParser
except ImportError, e:
	print "failed=True msg='failed to import python module: %s'" % e
	sys.exit(1)


class ClousigmaServer:
	def __init__(self, module):
		self.module = module
		self.changed = False
		self.status = self.module.params.pop('status')
		self.uuid = self.module.params.pop('uuid')
		self.datacenter = self.module.params.pop('datacenter')
		self.api_server = cloudsigma.resource.Server("https://"+self.datacenter+".cloudsigma.com/api/2.0/")

	def start_server(self):
		self.api_server.start(self.uuid)
		self.changed = True

	def stop_server(self):
		self.api_server.stop(self.uuid)
		self.changed = True

	def current_state(self):
		return self.api_server.get(self.uuid)['status']

	def __call__(self):
		result = dict(uuid=self.uuid, status=self.status)

		if self.status == 'running':
			if not self.current_state() == 'running':
				self.start_server()
		elif self.status == 'stopped':
			if self.current_state() != 'stopped':
				self.stop_server()

		result['changed'] = self.changed
		return result


MODULE_SPECS = dict(
	argument_spec=dict(
		uuid=dict(required=True),
		status=dict(default='running', choices=['running','stopped']),
		datacenter=dict(default=['zrh'], choices=['zrh','wdc','lvs'])
	),
	supports_check_mode=False
)

def main():
	module = AnsibleModule(**MODULE_SPECS)
	result = ClousigmaServer(module)()
	if 'failed' in result:
		module.fail_json(**result)
	else:
		module.exit_json(**result)


# import module snippets
from ansible.module_utils.basic import *

main()
